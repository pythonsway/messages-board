"""
Django settings for apiexample project.

Generated by 'django-admin startproject' using Django 3.0.2.

For more information on this file, see
https://docs.djangoproject.com/en/3.0/topics/settings/

For the full list of settings and their values, see
https://docs.djangoproject.com/en/3.0/ref/settings/
"""

import os

# Quick-start development settings - unsuitable for production
# See https://docs.djangoproject.com/en/3.0/howto/deployment/checklist/

# Build paths inside the project like this: os.path.join(BASE_DIR, ...)
# BASE_DIR = os.path.dirname(os.path.dirname(os.path.abspath(__file__)))
# because moved 'settings' file
BASE_DIR = os.path.dirname(os.path.dirname(os.path.dirname(os.path.abspath(__file__))))

# SECURITY WARNING: keep the secret key used in production secret!
SECRET_KEY = os.environ.get('SECRET_KEY', 'm^2kz8h+xrpl4egr)v78la_&u#%fqaqxlx@-4gdg=_nz79&fbi')
 
# Application definition
INSTALLED_APPS = [
    'django.contrib.admin',
    'django.contrib.auth',
    'django.contrib.contenttypes',
    'django.contrib.sessions',
    'django.contrib.messages',
    'django.contrib.staticfiles',
    'rest_framework',
    'graphene_django',
    'auth0authorization',
    'simple_app',
]

MIDDLEWARE = [
    'django.middleware.security.SecurityMiddleware',
    'whitenoise.middleware.WhiteNoiseMiddleware',
    'django.contrib.sessions.middleware.SessionMiddleware',
    'django.middleware.common.CommonMiddleware',
    'django.middleware.csrf.CsrfViewMiddleware',
    'django.contrib.auth.middleware.AuthenticationMiddleware',
    'django.contrib.auth.middleware.RemoteUserMiddleware',
    'django.contrib.messages.middleware.MessageMiddleware',
    'django.middleware.clickjacking.XFrameOptionsMiddleware',
]

AUTHENTICATION_BACKENDS = [
    'django.contrib.auth.backends.RemoteUserBackend',
    'graphql_jwt.backends.JSONWebTokenBackend',
    'django.contrib.auth.backends.ModelBackend',
]

REST_FRAMEWORK = {
    'DEFAULT_PERMISSION_CLASSES': (
        'rest_framework.permissions.IsAuthenticated',
    ),
    'DEFAULT_AUTHENTICATION_CLASSES': (
        'rest_framework_jwt.authentication.JSONWebTokenAuthentication',
        'rest_framework.authentication.SessionAuthentication',
        'rest_framework.authentication.BasicAuthentication',
    ),
}

GRAPHENE = {
    'SCHEMA': 'apiexample.schema.schema',
    'MIDDLEWARE': [
        'graphql_jwt.middleware.JSONWebTokenMiddleware',
    ],
}

# Styria-Digital/django-rest-framework-jwt
JWT_AUTH = {
    'JWT_PAYLOAD_GET_USERNAME_HANDLER': 'auth0authorization.utils.jwt_get_username_from_payload_handler',
    'JWT_DECODE_HANDLER': 'auth0authorization.utils.jwt_decode_token',
    'JWT_ALGORITHM': 'RS256',
    'JWT_AUDIENCE': os.getenv('AUTH0_AUDIENCE'),
    'JWT_ISSUER': f"https://{os.getenv('AUTH0_DOMAIN')}/",
    'JWT_AUTH_HEADER_PREFIX': 'Bearer',
}

GRAPHQL_JWT = {
    'JWT_PAYLOAD_GET_USERNAME_HANDLER': 'auth0authorization.utils.jwt_get_username_from_payload_handler',
    'JWT_DECODE_HANDLER': 'auth0authorization.utils.jwt_decode_token',
    'JWT_ALGORITHM': 'RS256',
    'JWT_AUDIENCE': os.getenv('AUTH0_AUDIENCE'),
    'JWT_ISSUER': f"https://{os.getenv('AUTH0_DOMAIN')}/",
    'JWT_AUTH_HEADER_PREFIX': 'Bearer',
}

# Callback URL
# CORS_ORIGIN_WHITELIST = (
#     'http://localhost:3000',
# )

ROOT_URLCONF = 'apiexample.urls'

TEMPLATES = [
    {
        'BACKEND': 'django.template.backends.django.DjangoTemplates',
        # find index.html in 'build'
        'DIRS': [os.path.join(BASE_DIR, 'frontend', 'build')],
        'APP_DIRS': True,
        'OPTIONS': {
            'context_processors': [
                'django.template.context_processors.debug',
                'django.template.context_processors.request',
                'django.contrib.auth.context_processors.auth',
                'django.contrib.messages.context_processors.messages',
            ],
        },
    },
]

WSGI_APPLICATION = 'apiexample.wsgi.application'

# Password validation
# https://docs.djangoproject.com/en/3.0/ref/settings/#auth-password-validators
AUTH_PASSWORD_VALIDATORS = [
    {
        'NAME': 'django.contrib.auth.password_validation.UserAttributeSimilarityValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.MinimumLengthValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.CommonPasswordValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.NumericPasswordValidator',
    },
]

# Internationalization
# https://docs.djangoproject.com/en/3.0/topics/i18n/
LANGUAGE_CODE = 'en-us'
TIME_ZONE = 'UTC'
USE_I18N = True
USE_L10N = True
USE_TZ = True

# Simplified static file serving for production
# https://warehouse.python.org/project/whitenoise/
# compression support
STATICFILES_STORAGE = 'whitenoise.storage.CompressedManifestStaticFilesStorage'

# Static files (CSS, JavaScript, Images)
# https://docs.djangoproject.com/en/3.0/howto/static-files/
# The URL to use when referring to static files (where they will be served from)
STATIC_URL = '/static/'
# The absolute path to the directory where collectstatic will collect static files for deployment.
# for whitenoise
STATIC_ROOT = os.path.join(BASE_DIR, 'staticfiles')

# update the STATICFILES_DIRS
STATICFILES_DIRS = (
    os.path.join(BASE_DIR, 'frontend', 'build', 'static'),
)


# REACT_APP_DIR = os.path.join(BASE_DIR, 'frontend')
# STATICFILES_DIRS = [os.path.join(REACT_APP_DIR, 'build', 'static'),]

# BASE_DIR = os.path.dirname(os.path.dirname(__file__))
# STATIC_ROOT = os.path.join(os.path.dirname(BASE_DIR), "deployment", "collected_static")
# STATICFILES_DIRS = (os.path.join(BASE_DIR, "my_app", "static"),)

# When React builds path will be `/static/css/...` so we will have Django Serve In Production,
# it's recommended use an alternative approach such as:
# http://whitenoise.evans.io/en/stable/django.html?highlight=django
# Place static in the same location as webpack build files
# STATIC_ROOT = os.path.join(BASE_DIR, 'build', 'static')
# STATICFILES_DIRS = []

