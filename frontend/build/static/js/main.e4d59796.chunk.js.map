{"version":3,"sources":["utils/react-auth0-spa.js","utils/PrivateRoute.js","components/NavBar.js","components/Loading.js","components/Footer.js","views/NoMatch.js","views/ExternalApi.js","utils/history.js","components/Message.js","views/ListView.js","views/CreateView.js","utils/timeFormat.js","views/DetailView.js","views/Profile.js","App.js","serviceWorker.js","index.js"],"names":["DEFAULT_REDIRECT_CALLBACK","window","history","replaceState","document","title","location","pathname","Auth0Context","React","createContext","useAuth0","useContext","PrivateRoute","children","path","rest","loacation","loading","isAuthenticated","loginWithRedirect","useEffect","a","async","appState","targetUrl","render","loaction","NavBar","user","logout","authMenu","className","to","activeClassName","href","id","role","data-toggle","aria-haspopup","aria-expanded","nickname","aria-labelledby","onClick","guestMenu","exact","type","data-target","aria-controls","aria-label","Loading","target","rel","NoMatch","ExternalApi","useState","showResult","setShowResult","apiMessage","setApiMessage","getTokenSilently","JSON","stringify","token","fetch","headers","Authorization","response","json","responseData","console","error","createBrowserHistory","Message","this","props","item","message","nick","Component","GET_MESSAGES","gql","ListView","searchString","URLSearchParams","useLocation","search","searchInputRef","useRef","useQuery","variables","get","errorPolicy","fetchPolicy","notifyOnNetworkStatusChange","data","fetchMore","onSubmit","e","preventDefault","query","current","value","push","onReset","ref","allMessages","edges","map","key","node","pageInfo","hasNextPage","cursor","endCursor","updateQuery","previousResult","fetchMoreResult","newEdges","length","__typename","CREATE_MESSAGE","CreateView","messageInputRef","useMutation","refetchQueries","createMessage","input","optimisticResponse","update","cache","readQuery","newMessage","writeQuery","required","rows","timeDifferenceForDate","date","previous","elapsed","milliSecondsPerMinute","Math","round","milliSecondsPerHour","milliSecondsPerDay","timeDifference","Date","getTime","GET_MESSAGE","CREATE_LIKE","DetailView","useParams","createLike","likes","totalCount","disabled","userLiked","newCount","messageId","likesNumber","newLike","creationDate","Profile","name","src","picture","width","alt","email","updated_at","App","httpLink","BatchHttpLink","uri","credentials","link","setContext","_","authorization","concat","InMemoryCache","client","ApolloClient","Footer","Boolean","hostname","match","ReactDOM","onRedirectCallback","initOptions","setIsAuthenticated","setUser","auth0Client","setAuth0","setLoading","popupOpen","setPopupOpen","createAuth0Client","auth0FromHook","includes","handleRedirectCallback","getUser","initAuth0","Provider","loginWithPopup","params","getIdTokenClaims","getTokenWithPopup","audience","process","domain","client_id","redirect_uri","origin","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.e4d59796.chunk.js","sourcesContent":["import React, { useState, useEffect, useContext } from 'react';\r\nimport createAuth0Client from '@auth0/auth0-spa-js';\r\n\r\nconst DEFAULT_REDIRECT_CALLBACK = () =>\r\n  window.history.replaceState({}, document.title, window.location.pathname);\r\n\r\nexport const Auth0Context = React.createContext();\r\n// provides the functions needed to login, logout\r\nexport const useAuth0 = () => useContext(Auth0Context);\r\nexport const Auth0Provider = ({\r\n  children,\r\n  onRedirectCallback = DEFAULT_REDIRECT_CALLBACK,\r\n  ...initOptions\r\n}) => {\r\n  const [isAuthenticated, setIsAuthenticated] = useState();\r\n  const [user, setUser] = useState();\r\n  const [auth0Client, setAuth0] = useState();\r\n  const [loading, setLoading] = useState(true);\r\n  const [popupOpen, setPopupOpen] = useState(false);\r\n\r\n  useEffect(() => {\r\n    const initAuth0 = async () => {\r\n      const auth0FromHook = await createAuth0Client(initOptions);\r\n      setAuth0(auth0FromHook);\r\n\r\n      if (window.location.search.includes('code=')) {\r\n        const { appState } = await auth0FromHook.handleRedirectCallback();\r\n        onRedirectCallback(appState);\r\n      }\r\n\r\n      const isAuthenticated = await auth0FromHook.isAuthenticated();\r\n\r\n      setIsAuthenticated(isAuthenticated);\r\n\r\n      if (isAuthenticated) {\r\n        const user = await auth0FromHook.getUser();\r\n        setUser(user);\r\n      }\r\n\r\n      setLoading(false);\r\n    };\r\n    initAuth0();\r\n    // eslint-disable-next-line\r\n  }, []);\r\n\r\n  const loginWithPopup = async (params = {}) => {\r\n    setPopupOpen(true);\r\n    try {\r\n      await auth0Client.loginWithPopup(params);\r\n    } catch (error) {\r\n      console.error(error);\r\n    } finally {\r\n      setPopupOpen(false);\r\n    }\r\n    const user = await auth0Client.getUser();\r\n    setUser(user);\r\n    setIsAuthenticated(true);\r\n  };\r\n\r\n  const handleRedirectCallback = async () => {\r\n    setLoading(true);\r\n    await auth0Client.handleRedirectCallback();\r\n    const user = await auth0Client.getUser();\r\n    setLoading(false);\r\n    setIsAuthenticated(true);\r\n    setUser(user);\r\n  };\r\n  return (\r\n    <Auth0Context.Provider\r\n      value={{\r\n        isAuthenticated,\r\n        user,\r\n        loading,\r\n        popupOpen,\r\n        loginWithPopup,\r\n        handleRedirectCallback,\r\n        getIdTokenClaims: (...p) => auth0Client.getIdTokenClaims(...p),\r\n        loginWithRedirect: (...p) => auth0Client.loginWithRedirect(...p),\r\n        getTokenSilently: (...p) => auth0Client.getTokenSilently(...p),\r\n        getTokenWithPopup: (...p) => auth0Client.getTokenWithPopup(...p),\r\n        logout: (...p) => auth0Client.logout(...p)\r\n      }}\r\n    >\r\n      {children}\r\n    </Auth0Context.Provider>\r\n  );\r\n};","import React, { useEffect } from 'react';\r\nimport { Route } from 'react-router-dom';\r\n\r\nimport { useAuth0 } from './react-auth0-spa';\r\n\r\n// A wrapper for <Route> that redirects to the login screen\r\n// if you're not yet authenticated\r\nconst PrivateRoute = ({ children, path, loacation, ...rest }) => {\r\n  const { loading, isAuthenticated, loginWithRedirect } = useAuth0();\r\n\r\n  useEffect(() => {\r\n    if (loading || isAuthenticated) {\r\n      return;\r\n    }\r\n    const fn = async () => {\r\n      await loginWithRedirect({\r\n        appState: { targetUrl: path }\r\n      });\r\n    };\r\n    fn();\r\n  }, [loading, isAuthenticated, loginWithRedirect, path]);\r\n\r\n  const render = loaction => (isAuthenticated === true ? children : null);\r\n\r\n  return <Route path={path} render={render} {...rest} />;\r\n};\r\n\r\nexport default PrivateRoute;","import React from 'react';\r\nimport { NavLink } from 'react-router-dom';\r\n\r\nimport { useAuth0 } from '../utils/react-auth0-spa';\r\n\r\nconst NavBar = () => {\r\n  const { isAuthenticated, loginWithRedirect, user, logout } = useAuth0();\r\n\r\n  const authMenu = (\r\n    <>\r\n      <ul className=\"navbar-nav ml-auto mt-2 mt-lg-0\">\r\n        <li className=\"nav-item\">\r\n          <NavLink to=\"/messages/create\" className=\"nav-link\" activeClassName=\"active\">\r\n            Create Message\r\n          </NavLink>\r\n        </li>\r\n        <li className=\"nav-item dropdown\">\r\n          <a className=\"nav-link dropdown-toggle font-italic\" href=\"/#\" id=\"navbarDropdownMenuLink\" role=\"button\" data-toggle=\"dropdown\" aria-haspopup=\"true\" aria-expanded=\"false\">\r\n            {isAuthenticated && user.nickname}\r\n          </a>\r\n          <div className=\"dropdown-menu\" aria-labelledby=\"navbarDropdownMenuLink\">\r\n            <NavLink to=\"/external-api\" className=\"dropdown-item\" activeClassName=\"active\">\r\n              ExternalAPI\r\n            </NavLink>\r\n            <NavLink to=\"/profile\" className=\"dropdown-item\" activeClassName=\"active\">\r\n              Profile\r\n            </NavLink>\r\n            <div className=\"dropdown-divider\"></div>\r\n            <button className=\"dropdown-item\" onClick={() => logout()}>Logout</button>\r\n          </div>\r\n        </li>\r\n      </ul>\r\n    </>\r\n  );\r\n\r\n  const guestMenu = (\r\n    <ul className=\"navbar-nav ml-auto mt-2 mt-lg-0\">\r\n      <li className=\"nav-item\">\r\n        <button onClick={() => loginWithRedirect({})} className=\"btn btn-secondary\">\r\n          Login\r\n        </button>\r\n      </li>\r\n    </ul>\r\n  );\r\n\r\n  return (\r\n    <nav className=\"navbar navbar-expand-sm navbar-dark bg-primary mb-5\">\r\n      <div className=\"container\">\r\n        <NavLink className=\"navbar-brand\" exact={true} to=\"/\">\r\n          Message Board\r\n        </NavLink>\r\n        <button className=\"navbar-toggler\" type=\"button\" data-toggle=\"collapse\" data-target=\"#navbarToggler\" aria-controls=\"navbarToggler\" aria-expanded=\"false\" aria-label=\"Toggle navigation\">\r\n          <span className=\"navbar-toggler-icon\"></span>\r\n        </button>\r\n        <div className=\"collapse navbar-collapse\" id=\"navbarToggler\">\r\n          {isAuthenticated ? authMenu : guestMenu}\r\n        </div>\r\n      </div>\r\n    </nav>\r\n  );\r\n};\r\n\r\nexport default NavBar;\r\n","import React from 'react';\r\n\r\nconst Loading = () => (\r\n  <div className=\"row\">\r\n    <div className=\"col text-center\">\r\n      <div className=\"spinner-border m-5\" role=\"status\">\r\n        <span className=\"sr-only\">Loading...</span>\r\n      </div>\r\n    </div>\r\n  </div>\r\n);\r\n\r\nexport default Loading;\r\n","import React from 'react';\r\n\r\nconst Loading = () => (\r\n  <div className=\"row\">\r\n    <div className=\"col text-center mt-5\">\r\n      <p> by <a href=\"https://pythonsway.it\" target=\"_blank\" rel=\"noopener noreferrer\">Python&#39;s way</a></p>\r\n    </div>\r\n  </div>\r\n);\r\n\r\nexport default Loading;\r\n","import React from 'react';\r\nimport { Link } from 'react-router-dom';\r\n\r\nconst NoMatch = () => (\r\n  <div className=\"row\">\r\n    <div className=\"col mx-auto\">\r\n      <div className=\"card bg-light card-body mt-5\">\r\n        <h2 className=\"mb-4\">Oops, something went wrong</h2>\r\n        <p>No match for <code>{window.location.pathname}</code></p>\r\n      </div>\r\n      <div className=\"m-4\">\r\n        <Link className=\"btn btn-outline-secondary\" to=\"/\">Go home</Link>\r\n      </div>\r\n    </div>\r\n  </div>\r\n);\r\n\r\nexport default NoMatch;","import React, { useState } from 'react';\r\n\r\nimport { useAuth0 } from '../utils/react-auth0-spa';\r\n\r\nconst ExternalApi = () => {\r\n  const [showResult, setShowResult] = useState(false);\r\n  const [apiMessage, setApiMessage] = useState('');\r\n  const { getTokenSilently, user } = useAuth0();\r\n\r\n  const callApi = async () => {\r\n    try {\r\n      const token = await getTokenSilently();\r\n      const response = await fetch('/api/private', {\r\n        headers: {\r\n          Authorization: `Bearer ${token}`\r\n        }\r\n      });\r\n      const responseData = await response.json();\r\n      setShowResult(true);\r\n      setApiMessage(responseData);\r\n    } catch (error) {\r\n      console.error(error);\r\n    }\r\n  };\r\n\r\n  return (\r\n    <div className=\"row\">\r\n      <div className=\"col mx-auto\">\r\n        <div className=\"card bg-light card-body mt-5\">\r\n          <h2 className=\"mb-4\">External API</h2>\r\n          <div className=\"card-body\">\r\n            Your profile\r\n          </div>\r\n          <ul className=\"list-group list-group-flush\">\r\n            <li className=\"list-group-item\"><code>{JSON.stringify(user, null, 2)}</code></li>\r\n          </ul>\r\n          <ul className=\"list-group list-group-flush\">\r\n            <li className=\"list-group-item\">\r\n              <button type=\"button\" className=\"btn btn-outline-info\" onClick={callApi}>\r\n                Ping API\r\n          </button>\r\n            </li>\r\n            <li className=\"list-group-item\">{showResult && <code>{JSON.stringify(apiMessage, null, 2)}</code>}</li>\r\n          </ul>\r\n        </div>\r\n      </div>\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default ExternalApi;\r\n","import { createBrowserHistory } from 'history';\r\n\r\nexport default createBrowserHistory();","import React, { Component } from 'react';\r\nimport { Link } from 'react-router-dom';\r\n\r\nclass Message extends Component {\r\n  render() {\r\n    return (\r\n      <div className=\"d-flex w-100 justify-content-between\">\r\n        <Link to={`/messages/${this.props.item.id}`} className=\"list-group-item list-group-item-action\">\r\n          <blockquote className=\"blockquote mb-0\">\r\n            <p className=\"text-truncate\">\r\n              {this.props.item.message}\r\n              <span className=\"blockquote-footer\">by {this.props.item.user.nick}</span>\r\n            </p>\r\n          </blockquote>\r\n        </Link>\r\n      </div>\r\n    );\r\n  }\r\n}\r\n\r\nexport default Message;\r\n","import React, { useRef } from 'react';\nimport { useLocation } from 'react-router-dom';\nimport gql from 'graphql-tag';\nimport { useQuery } from '@apollo/react-hooks';\n\nimport history from '../utils/history';\nimport Message from '../components/Message';\nimport Loading from '../components/Loading';\n\nexport const GET_MESSAGES = gql`\nquery ListViewSearch($search: String, $cursor: String) {\n  allMessages(orderBy: \"-creation_date\", first: 10, message_Icontains: $search, after: $cursor) @connection(key: \"allMessages\", filter: [\"search\"]){\n    totalCount\n    edges {\n      node {\n        id\n        message\n        user {\n          nick\n        }\n      }\n    }\n    pageInfo {\n      hasNextPage\n      hasPreviousPage\n      startCursor\n      endCursor\n    }\n  }\n}\n`;\n\n// custom hook that builds on useLocation to parse query string\nconst useSearch = () => {\n  return new URLSearchParams(useLocation().search);\n};\n\nconst ListView = () => {\n  const searchString = useSearch();\n  const searchInputRef = useRef(null);\n  // const [searchQuery, setSearchQuery] = useState('');\n  // const history = useHistory();\n  // const location = useLocation();\n  const { loading, error, data, fetchMore } = useQuery(GET_MESSAGES, {\n    variables: { search: searchString.get('search') || '', },\n    // variables: { search: searchQuery, },\n    // refresh every 60s\n    // pollInterval: 60000,\n    errorPolicy: 'all',\n    fetchPolicy: 'cache-and-network',\n    notifyOnNetworkStatusChange: true,\n  });\n\n  const handleSubmit = e => {\n    e.preventDefault();\n    const query = `?search=${searchInputRef.current.value}`;\n    history.push(`/${query}`);\n    // setSearchQuery(searchInputRef.current.value);\n  };\n\n  const handleReset = e => {\n    e.preventDefault();\n    searchInputRef.current.value = '';\n    history.push(`/`);\n  };\n\n  const loadMore = () => {\n    fetchMore({\n      variables: {\n        cursor: data.allMessages.pageInfo.endCursor,\n      },\n      // updateQuery: (prev, next) => {\n      updateQuery: (previousResult, { fetchMoreResult, variables }) => {\n        const newEdges = fetchMoreResult.allMessages.edges;\n        const pageInfo = fetchMoreResult.allMessages.pageInfo;\n        return newEdges.length\n          ? {\n            // new messages at the end of the list,\n            // update `pageInfo`: new `endCursor`, `hasNextPage`\n            allMessages: {\n              // '__typename': a meta field to get the name of the object type (Relay?)\n              __typename: previousResult.allMessages.__typename,\n              edges: [...previousResult.allMessages.edges, ...newEdges],\n              pageInfo,\n            },\n          }\n          : previousResult;\n      }\n    });\n  };\n\n  if (loading || error) return <Loading />;\n  // if (error) return `Error! ${error.message}`;\n\n  return (\n    <>\n      <div className=\"row\">\n        <div className=\"col\">\n          <h1 className=\"mb-4 text-center\">Messages</h1>\n        </div>\n      </div>\n      <div className=\"row\">\n        <div className=\"col\">\n          <h2 className=\"mt-4 font-weight-light\">Search:</h2>\n          <div className=\"col-md-8 m-auto\">\n            <form className=\"form-inline my-2 my-lg-0\" onSubmit={handleSubmit} onReset={handleReset}>\n              <input\n                className=\"form-control mr-sm-2 border-secondary\"\n                type=\"search\"\n                ref={searchInputRef} />\n              <div className=\"btn-group\" role=\"group\">\n                <button className=\"btn btn-outline-success my-2 my-sm-0\" type=\"submit\">Go</button>\n                <button className=\"btn btn-outline-danger my-2 my-sm-0\" type=\"reset\">Reset</button>\n              </div>\n            </form>\n          </div>\n          <h2 className=\"mt-4 font-weight-light\">Feed:</h2>\n          <div className=\"col-md-8 m-auto\">\n            <div className=\"list-group\">\n              {data.allMessages.edges.map(item => (\n                <Message\n                  key={item.node.id}\n                  item={item.node} />\n              ))}\n            </div>\n            <div className=\"m-3\">\n              {data.allMessages.pageInfo.hasNextPage &&\n                <button onClick={loadMore} className=\"btn btn-outline-primary\">Load more...</button>}\n            </div>\n          </div>\n        </div>\n      </div>\n    </>\n  );\n};\n\nexport default ListView;\n","import React, { useRef } from 'react';\nimport gql from 'graphql-tag';\nimport { useMutation } from '@apollo/react-hooks';\n\nimport history from '../utils/history';\nimport { useAuth0 } from '../utils/react-auth0-spa';\nimport Loading from '../components/Loading';\nimport { GET_MESSAGES } from './ListView';\n\nconst CREATE_MESSAGE = gql`\nmutation CreateView($input: CreateMessageMutationInput!) {\n  createMessage(input: $input) {\n    message {\n      id\n      message\n    }\n  }\n}\n`;\n\nconst CreateView = () => {\n  const { user } = useAuth0();\n  const messageInputRef = useRef(null);\n\n  const [createMessage, { loading, error, data }] = useMutation(CREATE_MESSAGE,\n    // Updating the cache after a mutation\n    {\n      refetchQueries: ['ListViewSearch']\n    }\n  );\n\n  const handleSubmit = e => {\n    e.preventDefault();\n    // ref: instead 'e.target.value'\n    createMessage({\n      variables: {\n        input: {\n          message: messageInputRef.current.value,\n          nick: user.nickname,\n        }\n      },\n      optimisticResponse: {\n        __typename: 'CreateMessageMutation',\n        createMessage: {\n          __typename: 'CreateMessageMutationPayload',\n          message: messageInputRef.current.value,\n          nick: user.nickname,\n        }\n      },\n      update: (cache, { data: { createMessage } }) => {\n        const { allMessages } = cache.readQuery({ query: GET_MESSAGES });\n        const newMessage = { node: { ...createMessage.message } };\n        cache.writeQuery({\n          query: GET_MESSAGES,\n          data: { ...data, allMessages: { edges: [...allMessages.edges, newMessage] } }\n        });\n      },\n    });\n    messageInputRef.current.value = '';\n    history.push('/');\n  };\n\n  if (loading || error) return <Loading />;\n  // if (error) return `Error! ${error.message}`;\n\n  return (\n    <div className=\"row\">\n      <div className=\"col-md-8 m-auto\">\n        <div className=\"card bg-light card-body mt-5\">\n          <h2 className=\"text-center\">Create Message</h2>\n          <form onSubmit={handleSubmit}>\n            <div className=\"form-group\">\n              <label>Message</label>\n              <textarea\n                required\n                rows=\"3\"\n                type=\"text\"\n                className=\"form-control form-control-lg\"\n                ref={messageInputRef} />\n            </div>\n            <div className=\"form-group\">\n              <button type=\"submit\" className=\"btn btn-outline-primary\">\n                Add\n            </button>\n            </div>\n          </form>\n        </div>\n      </div>\n    </div>\n  );\n};\n\nexport default CreateView;","const timeDifference = (current, previous) => {\r\n\r\n  const milliSecondsPerMinute = 60 * 1000;\r\n  const milliSecondsPerHour = milliSecondsPerMinute * 60;\r\n  const milliSecondsPerDay = milliSecondsPerHour * 24;\r\n  const milliSecondsPerMonth = milliSecondsPerDay * 30;\r\n  const milliSecondsPerYear = milliSecondsPerDay * 365;\r\n\r\n  const elapsed = current - previous;\r\n\r\n  if (elapsed < milliSecondsPerMinute / 3) {\r\n    return 'just now';\r\n  }\r\n\r\n  if (elapsed < milliSecondsPerMinute) {\r\n    return 'less than 1 min ago';\r\n  }\r\n\r\n  else if (elapsed < milliSecondsPerHour) {\r\n    return Math.round(elapsed / milliSecondsPerMinute) + ' min ago';\r\n  }\r\n\r\n  else if (elapsed < milliSecondsPerDay) {\r\n    return Math.round(elapsed / milliSecondsPerHour) + ' h ago';\r\n  }\r\n\r\n  else if (elapsed < milliSecondsPerMonth) {\r\n    return Math.round(elapsed / milliSecondsPerDay) + ' days ago';\r\n  }\r\n\r\n  else if (elapsed < milliSecondsPerYear) {\r\n    return Math.round(elapsed / milliSecondsPerMonth) + ' mo ago';\r\n  }\r\n\r\n  else {\r\n    return Math.round(elapsed / milliSecondsPerYear) + ' years ago';\r\n  }\r\n};\r\n\r\nconst timeDifferenceForDate = (date) => {\r\n  const now = new Date().getTime();\r\n  const updated = new Date(date).getTime();\r\n  return timeDifference(now, updated);\r\n};\r\n\r\nexport default timeDifferenceForDate;","import React from 'react';\nimport gql from 'graphql-tag';\nimport { useQuery, useMutation } from '@apollo/react-hooks';\nimport { useParams } from 'react-router-dom';\n\nimport timeDifferenceForDate from '../utils/timeFormat';\nimport Loading from '../components/Loading';\n\n// 'DetailView' query name is arbitrary, and has one variable 'id'\nconst GET_MESSAGE = gql`\nquery DetailView($id: ID!) {\n  message(id: $id) {\n    __typename\n    id\n    message\n    creationDate\n    user {\n      nick\n    }\n    userLiked\n    likes {\n      totalCount\n      edges {\n        node {\n          id\n        }\n      }\n    }\n  }\n}\n`;\n\nconst CREATE_LIKE = gql`\nmutation createLike($input: CreateLikeMutationInput!) {\n  createLike(input: $input) {\n    likesNumber\n    message {\n      __typename\n      id\n      message\n      creationDate\n      likes {\n        totalCount\n        edges {\n          node {\n            id\n          }\n        }\n      }\n    }\n  }\n}\n`;\n\nconst DetailView = () => {\n  const { id } = useParams();\n  // const location = useLocation();\n  // const history = useHistory();\n\n  const { loading, error, data } = useQuery(GET_MESSAGE, {\n    variables: { id },\n    errorPolicy: 'all',\n    fetchPolicy: 'cache-and-network',\n    notifyOnNetworkStatusChange: true,\n  });\n\n  const [createLike] = useMutation(CREATE_LIKE,\n  );\n\n  const handleClick = e => {\n    const newCount = data.message.likes.totalCount + 1;\n    createLike({\n      variables: { input: { messageId: data.message.id } },\n      optimisticResponse: {\n        __typename: 'CreateLikeMutation',\n        createLike: {\n          __typename: 'CreateLikeMutationPayload',\n          likesNumber: newCount,\n          message: data.message\n        }\n      },\n      // temporary solution, makes additional request\n      refetchQueries: [\n        {\n          query: GET_MESSAGE,\n          variables: { id }\n        }\n      ],\n      update: (cache, { data: { createLike } }) => {\n        // const { message } = cache.readQuery({ query: GET_MESSAGE });\n        const newLike = { node: { ...createLike } };\n        cache.writeQuery({\n          query: GET_MESSAGE,\n          variables: { id },\n          data: { ...data, likes: { totalCount: createLike.likesNumber, edges: [...data.message.likes.edges, newLike] } }\n        });\n      },\n    });\n  };\n\n  if (loading || error) return <Loading />;\n  // if (error) return `Error! ${error.message}`;\n\n  return (\n    <div className=\"row\">\n      <div className=\"col-md-8 m-auto\">\n        <div className=\"card mb-3\">\n          <h2 className=\"card-header text-center\">Meaasage</h2>\n          <div className=\"card-body\">\n            <h3 className=\"card-title text-center\">{`\"${data.message.message}\"`}</h3>\n            <h4 className=\"card-subtitle text-muted\">\n              <span className=\"font-weight-lighter\">by: </span>\n              {data.message.user.nick}\n            </h4>\n          </div>\n          <ul className=\"list-group list-group-flush\">\n            <li className=\"list-group-item\">Likes: {data.message.likes.totalCount}</li>\n            <li className=\"list-group-item\">\n              <button type=\"button\" className=\"btn btn-primary\" disabled={data.message.userLiked} onClick={handleClick}>\n                {data.message.userLiked ? 'Liked' : 'Like'}\n              </button>\n            </li>\n          </ul>\n          <div className=\"card-footer text-muted\">\n            {timeDifferenceForDate(data.message.creationDate)}\n          </div>\n        </div>\n      </div>\n    </div>\n  );\n};\n\nexport default DetailView;\n","import React from 'react';\r\n\r\nimport { useAuth0 } from '../utils/react-auth0-spa';\r\nimport timeDifferenceForDate from '../utils/timeFormat';\r\nimport Loading from '../components/Loading';\r\n\r\nconst Profile = () => {\r\n  const { loading, user } = useAuth0();\r\n\r\n  if (loading || !user) return <Loading />;\r\n\r\n  return (\r\n    <div className=\"row\">\r\n      <div className=\"col-md-8 m-auto\">\r\n        <div className=\"card mb-3\">\r\n          <h2 className=\"card-header text-center\">Profile</h2>\r\n          <div className=\"card-body\">\r\n            <h3 className=\"card-title text-center\">{user.name}</h3>\r\n          </div>\r\n          <img src={user.picture} className=\"mx-auto my-2 img-thumbnail\" width=\"120px\" alt=\"Profile\"></img>\r\n          <ul className=\"list-group list-group-flush\">\r\n            <li className=\"list-group-item\"><span className=\"font-weight-bolder\">e-mail: </span>{user.email}</li>\r\n            <li className=\"list-group-item\"><span className=\"font-weight-bolder\">nickname: </span>{user.nickname}</li>\r\n            <li className=\"list-group-item\"><span className=\"font-weight-bolder\">updated: </span>{timeDifferenceForDate(user.updated_at)}</li>\r\n          </ul>\r\n        </div>\r\n      </div>\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default Profile;\r\n","import React from 'react';\nimport { Route, Switch } from 'react-router-dom';\nimport { ApolloProvider } from 'react-apollo';\nimport { ApolloClient } from 'apollo-client';\nimport { BatchHttpLink } from 'apollo-link-batch-http';\nimport { InMemoryCache } from 'apollo-cache-inmemory';\nimport { setContext } from 'apollo-link-context';\n\nimport { useAuth0 } from './utils/react-auth0-spa';\nimport PrivateRoute from './utils/PrivateRoute';\nimport NavBar from './components/NavBar';\nimport Loading from './components/Loading';\nimport Footer from './components/Footer';\nimport NoMatch from './views/NoMatch';\nimport ExternalApi from './views/ExternalApi';\nimport CreateView from './views/CreateView';\nimport DetailView from './views/DetailView';\nimport Profile from './views/Profile';\nimport ListView from './views/ListView';\n\nconst App = () => {\n  // const history = useHistory();\n  const { loading, getTokenSilently, isAuthenticated } = useAuth0();\n\n  const httpLink = new BatchHttpLink({\n    // const httpLink = createHttpLink({\n    // const httpLink = new HttpLink({\n    uri: '/gql',\n    credentials: 'same-origin',\n  });\n\n  const authMiddleware = setContext(async (_, { headers }) => {\n    if (isAuthenticated) {\n      const token = await getTokenSilently();\n      return {\n        headers: {\n          ...headers,\n          authorization: `Bearer ${token}`,\n        }\n      };\n    } else {\n      return {\n        headers\n      };\n    }\n  });\n\n  const link = authMiddleware.concat(httpLink);\n  const cache = new InMemoryCache();\n  const client = new ApolloClient({\n    link,\n    cache,\n  });\n\n  if (loading) return <Loading />;\n\n  return (\n    <ApolloProvider client={client}>\n      <div className='App'>\n        <NavBar />\n        <div className=\"container\">\n          <Switch>\n            <Route exact path='/'>\n              <ListView />\n            </Route>\n            <PrivateRoute exact path='/profile'>\n              <Profile />\n            </PrivateRoute>\n            <PrivateRoute exact path='/external-api'>\n              <ExternalApi />\n            </PrivateRoute>\n            <PrivateRoute exact path='/messages/create'>\n              <CreateView />\n            </PrivateRoute>\n            <PrivateRoute exact path='/messages/:id'>\n              <DetailView />\n            </PrivateRoute>\n            <Route >\n              <NoMatch />\n            </Route>\n          </Switch>\n          <Footer />\n        </div>\n      </div>\n    </ApolloProvider>\n  );\n};\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport { Router } from 'react-router-dom';\n\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\nimport { Auth0Provider } from './utils/react-auth0-spa';\nimport history from './utils/history';\n\n// routes the user to the right place after login\nconst onRedirectCallback = appState => {\n  history.push(\n    appState && appState.targetUrl\n      ? appState.targetUrl\n      : window.location.pathname\n  );\n};\n\nReactDOM.render(\n  //  'BrowserRouter' ignores the history prop as it handles the history automatically\n  //   'Router' If need access to the history outside of a react component\n  <Router history={history}>\n    <Auth0Provider\n      audience={process.env.REACT_APP_AUDIENCE}\n      domain={process.env.REACT_APP_DOMAIN}\n      client_id={process.env.REACT_APP_CLIENTID}\n      redirect_uri={window.location.origin}\n      onRedirectCallback={onRedirectCallback}\n    >\n      <App />\n    </Auth0Provider>\n  </Router >,\n  document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}